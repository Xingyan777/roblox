-- MCTechGUILib.lua - MC科技风格UI库
-- 版本: 4.0
-- 提供科技感十足的Roblox UI组件

local MCTechGUILib = {}

-- 私有属性
local _private = {
    Players = game:GetService("Players"),
    UserInputService = game:GetService("UserInputService"),
    TweenService = game:GetService("TweenService"),
    RunService = game:GetService("RunService"),
    player = nil,
    playerGui = nil,
    screenGui = nil,
    subMenus = {},
    subMenuStates = {},
    detailWindows = {},
    detailStates = {},
    notificationQueue = {},
    activeNotifications = {},
    activeFeatures = {},
    featureStatusContainer = nil,
    showFeatureStatus = true,
    playerInfoEnabled = false,
    playerInfoFrame = nil,
    excludedMenus = {
        ["设置"] = true,
        ["显示功能状态"] = true,
        ["显示玩家信息"] = true
    }
}

-- 初始化库
function MCTechGUILib.init()
    _private.player = _private.Players.LocalPlayer
    _private.playerGui = _private.player:WaitForChild("PlayerGui")
    
    -- 创建主ScreenGui
    if not _private.screenGui then
        _private.screenGui = Instance.new("ScreenGui")
        _private.screenGui.Name = "MCTechGUI"
        _private.screenGui.ResetOnSpawn = false
        _private.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        _private.screenGui.Parent = _private.playerGui
    end
    
    return MCTechGUILib
end

-- 粉蓝渐变色配置
function MCTechGUILib.createPinkBlueGradientEffect(frame)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 105, 180)), -- 粉色
        ColorSequenceKeypoint.new(0.3, Color3.fromRGB(255, 182, 193)), -- 浅粉色
        ColorSequenceKeypoint.new(0.7, Color3.fromRGB(173, 216, 230)), -- 浅蓝色
        ColorSequenceKeypoint.new(1, Color3.fromRGB(135, 206, 250)) -- 天蓝色
    })
    gradient.Rotation = 45
    gradient.Parent = frame
    
    -- 创建缓慢旋转动画
    local rotationTween = _private.TweenService:Create(
        gradient,
        TweenInfo.new(8, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 405} -- 360度 + 45度初始角度
    )
    rotationTween:Play()
    
    return gradient
end

-- 创建粉蓝渐变边框效果
function MCTechGUILib.createPinkBlueStrokeEffect(stroke)
    local gradientSpeed = 0.5
    local time = 0
    
    local connection
    connection = _private.RunService.Heartbeat:Connect(function(dt)
        if not stroke.Parent then
            connection:Disconnect()
            return
        end
        
        time = time + dt * gradientSpeed
        
        -- 在粉色和蓝色之间插值
        local t = (math.sin(time) + 1) / 2 -- 将sin值从[-1,1]映射到[0,1]
        local pink = Color3.fromRGB(255, 105, 180)
        local blue = Color3.fromRGB(135, 206, 250)
        
        local r = pink.R + (blue.R - pink.R) * t
        local g = pink.G + (blue.G - pink.G) * t
        local b = pink.B + (blue.B - pink.B) * t
        
        stroke.Color = Color3.new(r, g, b)
        
        -- 透明度呼吸效果
        stroke.Transparency = 0.2 + 0.3 * math.abs(math.sin(time * 1.5))
    end)
    
    return connection
end

-- 创建玩家信息显示
function MCTechGUILib.createPlayerInfoDisplay()
    if _private.playerInfoFrame then
        _private.playerInfoFrame:Destroy()
        _private.playerInfoFrame = nil
    end
    
    if not _private.playerInfoEnabled then
        return
    end
    
    _private.playerInfoFrame = Instance.new("Frame")
    _private.playerInfoFrame.Name = "PlayerInfoDisplay"
    _private.playerInfoFrame.Size = UDim2.new(0, 300, 0, 100)
    _private.playerInfoFrame.Position = UDim2.new(0.5, -150, 0.5, -50) -- 屏幕中央
    _private.playerInfoFrame.BackgroundTransparency = 1 -- 完全透明背景
    _private.playerInfoFrame.BorderSizePixel = 0
    _private.playerInfoFrame.ZIndex = 1 -- 低层级，不干扰视线
    _private.playerInfoFrame.Parent = _private.screenGui
    
    -- 脚本名称文本
    local scriptNameLabel = Instance.new("TextLabel")
scriptNameLabel.Name = "ScriptName"
scriptNameLabel.Size = UDim2.new(1, 0, 0, 40)
scriptNameLabel.Position = UDim2.new(0, 0, 0, 0)
scriptNameLabel.BackgroundTransparency = 1
scriptNameLabel.Text = "脚本用户"
scriptNameLabel.TextTransparency = 0.7 -- 半透明
scriptNameLabel.TextSize = 35
scriptNameLabel.Font = Enum.Font.GothamBold
scriptNameLabel.TextStrokeTransparency = 0.8
scriptNameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
scriptNameLabel.Parent = _private.playerInfoFrame

-- 玩家名称文本
local playerNameLabel = Instance.new("TextLabel")
playerNameLabel.Name = "PlayerName"
playerNameLabel.Size = UDim2.new(1, 0, 0, 40)
playerNameLabel.Position = UDim2.new(0, 0, 0, 45)
playerNameLabel.BackgroundTransparency = 1
playerNameLabel.Text = _private.player.Name
playerNameLabel.TextTransparency = 0.7 -- 半透明
playerNameLabel.TextSize = 35
playerNameLabel.Font = Enum.Font.GothamBold
playerNameLabel.TextStrokeTransparency = 0.8
playerNameLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
playerNameLabel.Parent = _private.playerInfoFrame

-- 彩虹色效果函数
local function rainbowEffect(textLabel)
    local hue = 0
    while true do
        hue = (hue + 0.01) % 1
        textLabel.TextColor3 = Color3.fromHSV(hue, 1, 1)
        wait(0.1)
    end
end

-- 对两个文本标签应用彩虹效果
coroutine.wrap(rainbowEffect)(scriptNameLabel)
coroutine.wrap(rainbowEffect)(playerNameLabel)

    
    -- 淡入动画
    scriptNameLabel.TextTransparency = 1
    playerNameLabel.TextTransparency = 1
    
    local scriptFadeIn = _private.TweenService:Create(
        scriptNameLabel,
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {TextTransparency = 0.7}
    )
    
    local playerFadeIn = _private.TweenService:Create(
        playerNameLabel,
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {TextTransparency = 0.7}
    )
    
    scriptFadeIn:Play()
    playerFadeIn:Play()
end

-- 切换玩家信息显示
function MCTechGUILib.togglePlayerInfoDisplay(enabled)
    _private.playerInfoEnabled = enabled
    MCTechGUILib.createPlayerInfoDisplay()
end

-- 创建功能状态显示容器
function MCTechGUILib.createFeatureStatusContainer()
    _private.featureStatusContainer = Instance.new("Frame")
    _private.featureStatusContainer.Name = "FeatureStatusContainer"
    _private.featureStatusContainer.Size = UDim2.new(0, 200, 0, 0)
    _private.featureStatusContainer.Position = UDim2.new(1, -220, 0, 20) -- 确保在右上角
    _private.featureStatusContainer.BackgroundTransparency = 1
    _private.featureStatusContainer.BorderSizePixel = 0
    _private.featureStatusContainer.ClipsDescendants = false
    _private.featureStatusContainer.Visible = _private.showFeatureStatus
    _private.featureStatusContainer.Parent = _private.screenGui
    
    -- 添加自动布局
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.FillDirection = Enum.FillDirection.Vertical
    listLayout.Padding = UDim.new(0, 5)
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right -- 右对齐
    listLayout.Parent = _private.featureStatusContainer
    
    -- 监听子项变化以更新最后一个项的圆角
    local function updateFeatureStatusCorners()
        if not _private.featureStatusContainer then return end
        
        local children = _private.featureStatusContainer:GetChildren()
        local statusItems = {}
        for _, child in ipairs(children) do
            if child:IsA("TextLabel") then
                table.insert(statusItems, child)
            end
        end
        
        for _, item in ipairs(statusItems) do
            local corner = item:FindFirstChildOfClass("UICorner")
            if corner then
                corner:Destroy()
            end
        end
        
        if #statusItems > 0 then
            local lastItem = statusItems[#statusItems]
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 6)
            corner.Parent = lastItem
        end
    end
    
    _private.featureStatusContainer.ChildAdded:Connect(updateFeatureStatusCorners)
    _private.featureStatusContainer.ChildRemoved:Connect(updateFeatureStatusCorners)
    
    return _private.featureStatusContainer
end

-- 创建简化的渐变文字效果
function MCTechGUILib.createSimpleGradientTextEffect(textLabel, featureName)
    local time = 0
    local gradientSpeed = 1.2
    
    local connection
    connection = _private.RunService.Heartbeat:Connect(function(dt)
        if not textLabel.Parent then
            connection:Disconnect()
            return
        end
        
        time = time + dt * gradientSpeed
        
        -- 创建彩虹渐变效果
        local hue = (time * 60 + (#featureName * 20)) % 360 -- 根据功能名称偏移色相
        local saturation = 0.8 + 0.2 * math.sin(time * 2)
        local brightness = 0.9 + 0.1 * math.sin(time * 3)
        
        -- HSV转RGB
        local function HSVtoRGB(h, s, v)
            local r, g, b
            local i = math.floor(h / 60) % 6
            local f = (h / 60) - i
            local p = v * (1 - s)
            local q = v * (1 - f * s)
            local t = v * (1 - (1 - f) * s)
            
            if i == 0 then
                r, g, b = v, t, p
            elseif i == 1 then
                r, g, b = q, v, p
            elseif i == 2 then
                r, g, b = p, v, t
            elseif i == 3 then
                r, g, b = p, q, v
            elseif i == 4 then
                r, g, b = t, p, v
            else
                r, g, b = v, p, q
            end
            
            return Color3.new(r, g, b)
        end
        
        local gradientColor = HSVtoRGB(hue, saturation, brightness)
        textLabel.TextColor3 = gradientColor
        
        -- 添加发光效果
        local glowIntensity = 0.3 + 0.7 * math.abs(math.sin(time * 1.5))
        textLabel.TextStrokeTransparency = 0.8 - (glowIntensity * 0.3)
        textLabel.TextStrokeColor3 = gradientColor
    end)
    
    return connection
end

-- 添加功能状态显示项
function MCTechGUILib.addFeatureStatusItem(featureName)
    if not _private.showFeatureStatus or not _private.featureStatusContainer or _private.excludedMenus[featureName] then
        return nil
    end
    
    -- 创建纯文本标签
    local statusText = Instance.new("TextLabel")
    statusText.Name = "Status_" .. featureName
    statusText.Size = UDim2.new(0, 150, 0, 18) -- 固定大小
    statusText.BackgroundTransparency = 1 -- 完全透明背景
    statusText.BorderSizePixel = 0
    statusText.Text = featureName -- 只显示功能名称
    statusText.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusText.TextSize = 16 -- 固定文字大小
    statusText.Font = Enum.Font.GothamBold
    statusText.TextXAlignment = Enum.TextXAlignment.Right -- 右对齐
    statusText.TextStrokeTransparency = 0.5
    statusText.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    statusText.Parent = _private.featureStatusContainer
    
    -- 启动渐变文字效果
    local gradientConnection = MCTechGUILib.createSimpleGradientTextEffect(statusText, featureName)
    
    -- 滑入动画
    statusText.Position = UDim2.new(0, 200, 0, 0)
    local slideInTween = _private.TweenService:Create(
        statusText,
        TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Position = UDim2.new(0, 0, 0, 0)}
    )
    slideInTween:Play()
    
    -- 存储连接以便清理
    statusText:SetAttribute("GradientConnection", gradientConnection)
    
    -- 更新容器大小
    MCTechGUILib.updateFeatureStatusContainerSize()
    
    return statusText
end

-- 移除功能状态显示项
function MCTechGUILib.removeFeatureStatusItem(featureName)
    if not _private.featureStatusContainer then
        return
    end
    
    local statusText = _private.featureStatusContainer:FindFirstChild("Status_" .. featureName)
    if statusText then
        -- 清理渐变效果连接
        local gradientConnection = statusText:GetAttribute("GradientConnection")
        if gradientConnection then
            gradientConnection:Disconnect()
        end
        
        -- 滑出动画
        local slideOutTween = _private.TweenService:Create(
            statusText,
            TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
            {
                Position = UDim2.new(0, 200, 0, 0),
                TextTransparency = 1,
                TextStrokeTransparency = 1
            }
        )
        
        slideOutTween:Play()
        slideOutTween.Completed:Connect(function()
            statusText:Destroy()
            MCTechGUILib.updateFeatureStatusContainerSize()
        end)
    end
end

-- 更新功能状态容器大小
function MCTechGUILib.updateFeatureStatusContainerSize()
    if not _private.featureStatusContainer then
        return
    end
    
    local childCount = #_private.featureStatusContainer:GetChildren() - 1 -- 减去UIListLayout
    local newHeight = math.max(0, childCount * 23 - 5) -- 18像素高度 + 5像素间距，最后一项不需要间距
    
    local sizeTween = _private.TweenService:Create(
        _private.featureStatusContainer,
        TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(0, 200, 0, newHeight)}
    )
    sizeTween:Play()
end

-- 切换功能状态显示
function MCTechGUILib.toggleFeatureStatusDisplay(enabled)
    _private.showFeatureStatus = enabled
    
    if _private.featureStatusContainer then
        _private.featureStatusContainer.Visible = enabled
        
        if enabled then
            -- 重新显示所有激活的功能
            for featureName, _ in pairs(_private.activeFeatures) do
                if not _private.featureStatusContainer:FindFirstChild("Status_" .. featureName) and not _private.excludedMenus[featureName] then
                    MCTechGUILib.addFeatureStatusItem(featureName)
                end
            end
        end
        MCTechGUILib.updateFeatureStatusContainerSize()
    elseif enabled then
        -- 如果容器不存在但需要显示，创建它
        MCTechGUILib.createFeatureStatusContainer()
        for featureName, _ in pairs(_private.activeFeatures) do
            if not _private.excludedMenus[featureName] then
                MCTechGUILib.addFeatureStatusItem(featureName)
            end
        end
        MCTechGUILib.updateFeatureStatusContainerSize()
    end
end

-- 更新功能状态
function MCTechGUILib.updateFeatureStatus(featureName, isActive)
    if isActive then
        _private.activeFeatures[featureName] = true
        if _private.showFeatureStatus and not _private.excludedMenus[featureName] then
            MCTechGUILib.addFeatureStatusItem(featureName)
            MCTechGUILib.updateFeatureStatusContainerSize()
        end
    else
        _private.activeFeatures[featureName] = nil
        MCTechGUILib.removeFeatureStatusItem(featureName)
        MCTechGUILib.updateFeatureStatusContainerSize()
    end
end

-- 显示通知
function MCTechGUILib.showNotification(title, message, isEnabled)
    -- 创建通知容器
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(0, 180, 0, 45) -- 更小的通知
    notification.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.ClipsDescendants = false
    notification.ZIndex = 10 -- 高层级，确保通知在其他UI上方
    notification.Parent = _private.screenGui
    
    -- 添加圆角
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = notification
    
    -- 添加粉蓝渐变背景
    MCTechGUILib.createPinkBlueGradientEffect(notification)
    
    -- 添加粉蓝渐变边框
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Transparency = 0.2
    stroke.Parent = notification
    
    -- 启动粉蓝渐变边框效果
    local strokeConnection = MCTechGUILib.createPinkBlueStrokeEffect(stroke)
    
    -- 标题文本
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -15, 0, 16)
    titleLabel.Position = UDim2.new(0, 8, 0, 3)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 11
    titleLabel.Font = Enum.Font.GothamMedium
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextStrokeTransparency = 0.7
    titleLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    titleLabel.Parent = notification
    
    -- 消息文本
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(1, -15, 0, 13)
    messageLabel.Position = UDim2.new(0, 8, 0, 20)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = isEnabled and Color3.fromRGB(173, 216, 230) or Color3.fromRGB(255, 182, 193)
    messageLabel.TextSize = 9
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextStrokeTransparency = 0.8
    messageLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    messageLabel.Parent = notification
    
    -- 状态指示器
    local statusIndicator = Instance.new("Frame")
    statusIndicator.Name = "StatusIndicator"
    statusIndicator.Size = UDim2.new(0, 6, 0, 6)
    statusIndicator.Position = UDim2.new(1, -12, 0, 6)
    statusIndicator.BackgroundColor3 = isEnabled and Color3.fromRGB(135, 206, 250) or Color3.fromRGB(255, 105, 180)
    statusIndicator.BorderSizePixel = 0
    statusIndicator.Parent = notification
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 3)
    indicatorCorner.Parent = statusIndicator
    
    -- 设置初始位置（在屏幕右侧外）
    local screenSize = workspace.CurrentCamera.ViewportSize
    notification.Position = UDim2.new(0, screenSize.X, 1, -60 - (#_private.activeNotifications * 50))
    
    -- 添加到活跃通知列表
    table.insert(_private.activeNotifications, notification)
    
    -- 计算出现时间（每个通知延迟0.2秒出现，避免重叠）
    local appearDelay = #_private.activeNotifications * 0.2
    
    task.wait(appearDelay)
    
    -- 滑入动画
    local slideInTween = _private.TweenService:Create(
        notification,
        TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Position = UDim2.new(1, -190, 1, -60 - ((#_private.activeNotifications - 1) * 50))}
    )
    
    slideInTween:Play()
    
    -- 2秒后滑出（每个通知独立计时）
    task.wait(2)
    
    -- 滑出动画
    local slideOutTween = _private.TweenService:Create(
        notification,
        TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
        {Position = UDim2.new(1, 50, 1, -60 - ((#_private.activeNotifications - 1) * 50))}
    )
    
    slideOutTween:Play()
    
    slideOutTween.Completed:Connect(function()
        -- 停止渐变效果
        if strokeConnection then
            strokeConnection:Disconnect()
        end
        
        -- 从活跃通知列表中移除
        for i, notif in ipairs(_private.activeNotifications) do
            if notif == notification then
                table.remove(_private.activeNotifications, i)
                break
            end
        end
        
        notification:Destroy()
        
        -- 重新排列剩余通知
        for i, notif in ipairs(_private.activeNotifications) do
            local repositionTween = _private.TweenService:Create(
                notif,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(1, -190, 1, -60 - ((i - 1) * 50))}
            )
            repositionTween:Play()
        end
    end)
end

-- 创建细节调整窗口
function MCTechGUILib.createDetailWindow(title, parentButton, onValueChange)
    -- 创建窗口容器
    local detailFrame = Instance.new("Frame")
    detailFrame.Name = title .. "Detail"
    detailFrame.Size = UDim2.new(0, 250, 0, 150) -- 增加宽度以扩大拉条范围
    detailFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    detailFrame.BackgroundTransparency = 0.1
    detailFrame.BorderSizePixel = 0
    detailFrame.ClipsDescendants = true
    detailFrame.ZIndex = 7 -- 高于菜单层级
    detailFrame.Parent = _private.screenGui
    
    -- 添加圆角
    local detailCorner = Instance.new("UICorner")
    detailCorner.CornerRadius = UDim.new(0, 6)
    detailCorner.Parent = detailFrame
    
    -- 添加粉蓝渐变背景
    MCTechGUILib.createPinkBlueGradientEffect(detailFrame)
    
    -- 添加粉蓝渐变边框
    local detailStroke = Instance.new("UIStroke")
    detailStroke.Thickness = 2
    detailStroke.Transparency = 0.3
    detailStroke.Parent = detailFrame
    
    -- 启动粉蓝渐变边框效果
    MCTechGUILib.createPinkBlueStrokeEffect(detailStroke)
    
    -- 标题栏（可拖动区域）
    local header = Instance.new("TextButton")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 30)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundTransparency = 1
    header.BorderSizePixel = 0
    header.Text = title .. " 设置"
    header.TextColor3 = Color3.fromRGB(255, 255, 255)
    header.TextSize = 16
    header.Font = Enum.Font.GothamBold
    header.TextStrokeTransparency = 0.7
    header.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    header.Parent = detailFrame
    
    -- 内容容器
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, 0, 1, -30)
    contentFrame.Position = UDim2.new(0, 0, 0, 30)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = detailFrame
    
    -- 速度滑块
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
    sliderLabel.Position = UDim2.new(0, 0, 0, 0)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = "速度调整"
    sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderLabel.TextSize = 12
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.Parent = contentFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -20, 0, 6)
    sliderTrack.Position = UDim2.new(0, 10, 0, 25)
    sliderTrack.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    sliderTrack.BorderSizePixel = 0
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 3)
    sliderCorner.Parent = sliderTrack
    sliderTrack.Parent = contentFrame
    
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Size = UDim2.new(0, 12, 0, 12)
    sliderKnob.Position = UDim2.new(0, 0, 0.5, -3)
    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderKnob.BorderSizePixel = 0
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 6)
    knobCorner.Parent = sliderKnob
    sliderKnob.Parent = sliderTrack
    
    local sliderValue = Instance.new("TextLabel")
    sliderValue.Size = UDim2.new(0, 30, 0, 15)
    sliderValue.Position = UDim2.new(0.5, -15, -1, -5)
    sliderValue.BackgroundTransparency = 1
    sliderValue.Text = "1.0"
    sliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderValue.TextSize = 10
    sliderValue.Parent = sliderKnob
    
    -- 滑块交互（只在滑块区域内）
    local minValue = 1.0
    local maxValue = 500.0
    local currentValue = 1.0
    local dragging = false
    
    local function updateSlider(value)
        currentValue = value
        sliderValue.Text = string.format("%.1f", currentValue)
        if onValueChange then
            onValueChange(currentValue)
        end
    end
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            local trackAbsPos = sliderTrack.AbsolutePosition.X
            local trackAbsSize = sliderTrack.AbsoluteSize.X
            local mouseX = input.Position.X
            local relativePos = math.clamp((mouseX - trackAbsPos) / trackAbsSize, 0, 1)
            sliderKnob.Position = UDim2.new(relativePos, 0, 0.5, -3)
            updateSlider(minValue + (maxValue - minValue) * relativePos)
        end
    end)
    
    _private.UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    _private.UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local trackAbsPos = sliderTrack.AbsolutePosition.X
            local trackAbsSize = sliderTrack.AbsoluteSize.X
            local mouseX = input.Position.X
            
            local relativePos = math.clamp((mouseX - trackAbsPos) / trackAbsSize, 0, 1)
            sliderKnob.Position = UDim2.new(relativePos, 0, 0.5, -3)
            
            updateSlider(minValue + (maxValue - minValue) * relativePos)
        end
    end)
    
    -- 自动跳跃开关（经典开关样式）
    local switchLabel = Instance.new("TextLabel")
    switchLabel.Size = UDim2.new(1, 0, 0, 20)
    switchLabel.Position = UDim2.new(0, 0, 0, 40)
    switchLabel.BackgroundTransparency = 1
    switchLabel.Text = "自动跳跃"
    switchLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    switchLabel.TextSize = 12
    switchLabel.Font = Enum.Font.Gotham
    switchLabel.Parent = contentFrame
    
    local switchFrame = Instance.new("Frame")
    switchFrame.Size = UDim2.new(0, 40, 0, 20)
    switchFrame.Position = UDim2.new(1, -50, 0, 40)
    switchFrame.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    switchFrame.BorderSizePixel = 0
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(0, 10)
    switchCorner.Parent = switchFrame
    switchFrame.Parent = contentFrame
    
    local switchKnob = Instance.new("Frame")
    switchKnob.Size = UDim2.new(0, 20, 1, 0)
    switchKnob.Position = UDim2.new(0, 0, 0, 0)
    switchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    switchKnob.BorderSizePixel = 0
    local switchKnobCorner = Instance.new("UICorner")
    switchKnobCorner.CornerRadius = UDim.new(0, 10)
    switchKnobCorner.Parent = switchKnob
    switchKnob.Parent = switchFrame
    
    local autoJumpEnabled = false
    switchFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            autoJumpEnabled = not autoJumpEnabled
            local targetPos = autoJumpEnabled and UDim2.new(0.5, 0, 0, 0) or UDim2.new(0, 0, 0, 0)
            local tween = _private.TweenService:Create(switchKnob, TweenInfo.new(0.2), {Position = targetPos})
            tween:Play()
            switchFrame.BackgroundColor3 = autoJumpEnabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
            if onValueChange then
                onValueChange("autoJump", autoJumpEnabled)
            end
        end
    end)
    
    -- 拖动功能
    local dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        detailFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragStart = input.Position
            startPos = detailFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragInput = nil
                end
            end)
        end
    end)
    
    header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    _private.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput then
            updateInput(input)
        end
    end)
    
    -- 设置位置在父按钮旁边
    local parentButtonPos = parentButton.AbsolutePosition
    local parentButtonSize = parentButton.AbsoluteSize
    detailFrame.Position = UDim2.new(
        0, parentButtonPos.X + parentButtonSize.X + 5,
        0, parentButtonPos.Y
    )
    
    -- 初始透明度为1，准备浮现动画
    detailFrame.BackgroundTransparency = 1
    header.TextTransparency = 1
    
    local fadeIn = _private.TweenService:Create(
        detailFrame,
        TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {BackgroundTransparency = 0.1}
    )
    
    local textFadeIn = _private.TweenService:Create(
        header,
        TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {TextTransparency = 0}
    )
    
    fadeIn:Play()
    textFadeIn:Play()
    
    detailFrame.Visible = true
    _private.detailStates[title] = true
    
    return detailFrame
end

-- 创建浮动菜单
function MCTechGUILib.createFloatingMenu(title, options, isSubMenu, parentMenuButton)
    -- 如果是子菜单且已存在，则切换显示状态
    if isSubMenu and _private.subMenus[title] then
        local menu = _private.subMenus[title]
        local isCurrentlyVisible = menu.Visible
        
        -- 添加浮现动画
        if not isCurrentlyVisible then
            menu.Visible = true
            menu.BackgroundTransparency = 1
            menu.Header.TextTransparency = 1
            
            -- 浮现动画
            local fadeIn = _private.TweenService:Create(
                menu,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0.1}
            )
            
            local textFadeIn = _private.TweenService:Create(
                menu.Header,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {TextTransparency = 0}
            )
            
            fadeIn:Play()
            textFadeIn:Play()
        else
            -- 淡出动画
            local fadeOut = _private.TweenService:Create(
                menu,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 1}
            )
            
            local textFadeOut = _private.TweenService:Create(
                menu.Header,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {TextTransparency = 1}
            )
            
            fadeOut:Play()
            textFadeOut:Play()
            
            fadeOut.Completed:Connect(function()
                menu.Visible = false
            end)
        end
        
        -- 更新子菜单状态记录
        _private.subMenuStates[title] = not isCurrentlyVisible
        
        -- 更新父菜单按钮状态
        if parentMenuButton then
            if not isCurrentlyVisible then
                parentMenuButton.BackgroundColor3 = Color3.fromRGB(135, 206, 250)
                parentMenuButton.BackgroundTransparency = 0.2
            else
                parentMenuButton.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
                parentMenuButton.BackgroundTransparency = 0.3
            end
        end
        
        return menu
    end
    
    -- 创建菜单容器
    local menuFrame = Instance.new("Frame")
    menuFrame.Name = title .. "Menu"
    menuFrame.Size = UDim2.new(0, 120, 0, 30)
    menuFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    menuFrame.BackgroundTransparency = 0.1
    menuFrame.BorderSizePixel = 0
    menuFrame.ClipsDescendants = true
    menuFrame.ZIndex = 5 -- 中等层级，确保菜单在状态显示上方但通知下方
    menuFrame.Parent = _private.screenGui
    
    -- 添加圆角
    local menuCorner = Instance.new("UICorner")
    menuCorner.CornerRadius = UDim.new(0, 6)
    menuCorner.Parent = menuFrame
    
    -- 添加粉蓝渐变背景
    MCTechGUILib.createPinkBlueGradientEffect(menuFrame)
    
    -- 添加粉蓝渐变边框
    local menuStroke = Instance.new("UIStroke")
    menuStroke.Thickness = 2
    menuStroke.Transparency = 0.3
    menuStroke.Parent = menuFrame
    
    -- 启动粉蓝渐变边框效果
    MCTechGUILib.createPinkBlueStrokeEffect(menuStroke)
    
    -- 标题栏（可拖动区域）
    local header = Instance.new("TextButton")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 30)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundTransparency = 1
    header.BorderSizePixel = 0
    header.Text = title
    header.TextColor3 = Color3.fromRGB(255, 255, 255)
    header.TextSize = 16 -- 更大的字体
    header.Font = Enum.Font.GothamBold -- 加粗字体
    header.TextStrokeTransparency = 0.7
    header.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    header.Parent = menuFrame
    
    -- 内容容器
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, 0, 0, 0)
    contentFrame.Position = UDim2.new(0, 0, 0, 30)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = menuFrame
    
    local optionButtons = {}
    local isExpanded = false
    local dragInput, dragStart, startPos
    
    -- 创建菜单选项按钮
    for i, option in ipairs(options) do
        local button = Instance.new("TextButton")
        button.Name = option.Name
        button.Size = UDim2.new(1, 0, 0, 28) -- 满宽，无边距，确保无缝连接
        button.Position = UDim2.new(0, 0, 0, (i-1)*28) -- 移除X偏移，确保居中
        button.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
        button.BackgroundTransparency = 0.3
        button.BorderSizePixel = 0
        button.Text = option.HasDetails and option.Name .. " •" or option.Name  -- 添加•符号表示可长按
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 14 -- 加大字体
        button.Font = Enum.Font.GothamBold -- 加粗字体
        button.TextStrokeTransparency = 0.8
        button.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        button.TextXAlignment = Enum.TextXAlignment.Center -- 文字居中
        button.ZIndex = 6 -- 按钮层级高于菜单背景
        button.Parent = contentFrame
        
        -- 添加按钮圆角
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 0) -- 所有按钮直角，确保开启时无缝组成矩形
        buttonCorner.Parent = button
        
        -- 如果是子菜单类型，初始化状态记录
        if option.Type == "submenu" then
            if _private.subMenuStates[option.Name] == nil then
                _private.subMenuStates[option.Name] = false
            end
            -- 根据子菜单状态设置按钮外观
            if _private.subMenuStates[option.Name] then
                button.BackgroundColor3 = Color3.fromRGB(135, 206, 250)
                button.BackgroundTransparency = 0.2
            end
        end
        
        -- 按钮鼠标事件
        button.MouseEnter:Connect(function()
            if option.Type == "toggle" then
                if not option.Active then
                    button.BackgroundColor3 = Color3.fromRGB(255, 182, 193)
                    button.BackgroundTransparency = 0.3
                end
            elseif option.Type == "submenu" then
                if not _private.subMenuStates[option.Name] then
                    button.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
                    button.BackgroundTransparency = 0.3
                end
            end
        end)
        
        button.MouseLeave:Connect(function()
            if option.Type == "toggle" then
                if not option.Active then
                    button.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
                    button.BackgroundTransparency = 0.3
                end
            elseif option.Type == "submenu" then
                if not _private.subMenuStates[option.Name] then
                    button.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
                    button.BackgroundTransparency = 0.3
                end
            end
        end)
        
        -- 长按检测（仅针对有细节的toggle）
        local pressStartTime
        local longPressThreshold = 0.5  -- 长按阈值0.5秒

        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                pressStartTime = tick()
            end
        end)
        
        button.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                local pressDuration = tick() - pressStartTime
                if pressDuration >= longPressThreshold and option.HasDetails then
                    -- 长按切换细节窗口
                    local detailTitle = option.Name
                    if _private.detailWindows[detailTitle] then
                        local window = _private.detailWindows[detailTitle]
                        local isCurrentlyVisible = window.Visible
                        
                        if not isCurrentlyVisible then
                            window.Visible = true
                            window.BackgroundTransparency = 1
                            window.Header.TextTransparency = 1
                            
                            local fadeIn = _private.TweenService:Create(
                                window,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {BackgroundTransparency = 0.1}
                            )
                            
                            local textFadeIn = _private.TweenService:Create(
                                window.Header,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0}
                            )
                            
                            fadeIn:Play()
                            textFadeIn:Play()
                        else
                            local fadeOut = _private.TweenService:Create(
                                window,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {BackgroundTransparency = 1}
                            )
                            
                            local textFadeOut = _private.TweenService:Create(
                                window.Header,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 1}
                            )
                            
                            fadeOut:Play()
                            textFadeOut:Play()
                            
                            fadeOut.Completed:Connect(function()
                                window.Visible = false
                            end)
                        end
                        
                        _private.detailStates[detailTitle] = not isCurrentlyVisible
                    else
                        -- 创建新细节窗口
                        local newWindow = MCTechGUILib.createDetailWindow(detailTitle, button, option.DetailCallback)
                        _private.detailWindows[detailTitle] = newWindow
                    end
                    return
                end
            end
        end)
        
        -- 按钮点击事件（短按切换toggle）
        button.MouseButton1Click:Connect(function()
            local pressDuration = tick() - pressStartTime
            if pressDuration < longPressThreshold then
                if option.Type == "toggle" then
                    option.Active = not option.Active
                    
                    -- 使用粉蓝色变化表示开启状态
                    if option.Active then
                        button.BackgroundColor3 = Color3.fromRGB(135, 206, 250)
                        button.BackgroundTransparency = 0.2
                    else
                        button.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
                        button.BackgroundTransparency = 0.3
                    end
                    
                    -- 显示通知
                    task.spawn(function()
                        MCTechGUILib.showNotification(
                            option.Name,
                            option.Active and "功能已开启" or "功能已关闭",
                            option.Active
                        )
                    end)
                    
                    -- 更新功能状态显示
                    if isSubMenu then
                        MCTechGUILib.updateFeatureStatus(option.Name, option.Active)
                    end
                    
                    -- 执行功能回调
                    if option.Callback then
                        option.Callback(option.Active)
                    end
                elseif option.Type == "submenu" then
                    -- 子菜单的开关逻辑
                    if _private.subMenus[option.Name] then
                        -- 如果子菜单已存在，切换其显示状态
                        local menu = _private.subMenus[option.Name]
                        local isCurrentlyVisible = menu.Visible
                        
                        if not isCurrentlyVisible then
                            menu.Visible = true
                            menu.BackgroundTransparency = 1
                            menu.Header.TextTransparency = 1
                            
                            -- 浮现动画
                            local fadeIn = _private.TweenService:Create(
                                menu,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {BackgroundTransparency = 0.1}
                            )
                            
                            local textFadeIn = _private.TweenService:Create(
                                menu.Header,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0}
                            )
                            
                            fadeIn:Play()
                            textFadeIn:Play()
                        else
                            -- 淡出动画
                            local fadeOut = _private.TweenService:Create(
                                menu,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {BackgroundTransparency = 1}
                            )
                            
                            local textFadeOut = _private.TweenService:Create(
                                menu.Header,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 1}
                            )
                            
                            fadeOut:Play()
                            textFadeOut:Play()
                            
                            fadeOut.Completed:Connect(function()
                                menu.Visible = false
                            end)
                        end
                        
                        _private.subMenuStates[option.Name] = not isCurrentlyVisible
                        
                        -- 更新按钮状态
                        if not isCurrentlyVisible then
                            button.BackgroundColor3 = Color3.fromRGB(135, 206, 250)
                            button.BackgroundTransparency = 0.2
                        else
                            button.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
                            button.BackgroundTransparency = 0.3
                        end
                    else
                        -- 如果子菜单不存在，创建它
                        if option.SubMenu then
                            -- 获取父按钮的位置
                            local parentButtonPos = button.AbsolutePosition
                            local parentButtonSize = button.AbsoluteSize
                            
                            -- 创建子菜单
                            local subMenu = MCTechGUILib.createFloatingMenu(option.Name, option.SubMenu, true, button)
                            
                            -- 设置子菜单位置在父按钮旁边
                            subMenu.Position = UDim2.new(
                                0, parentButtonPos.X + parentButtonSize.X + 5,
                                0, parentButtonPos.Y
                            )
                            
                            -- 设置初始透明度为1，准备浮现动画
                            subMenu.BackgroundTransparency = 1
                            subMenu.Header.TextTransparency = 1
                            
                            -- 浮现动画
                            local fadeIn = _private.TweenService:Create(
                                subMenu,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {BackgroundTransparency = 0.1}
                            )
                            
                            local textFadeIn = _private.TweenService:Create(
                                subMenu.Header,
                                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0}
                            )
                            
                            fadeIn:Play()
                            textFadeIn:Play()
                            
                            subMenu.Visible = true
                            _private.subMenuStates[option.Name] = true
                        end
                    end
                    
                    -- 显示子菜单通知
                    task.spawn(function()
                        MCTechGUILib.showNotification(
                            option.Name .. " 菜单",
                            _private.subMenuStates[option.Name] and "已打开" or "已关闭",
                            _private.subMenuStates[option.Name]
                        )
                    end)
                end
            end
        end)
        
        table.insert(optionButtons, button)
    end
    
    -- 展开/收起菜单函数
    local function toggleMenu()
        isExpanded = not isExpanded
        
        local targetSize, targetContentSize
        if isExpanded then
            targetSize = UDim2.new(0, 120, 0, 30 + #options * 28)
            targetContentSize = UDim2.new(1, 0, 0, #options * 28)
        else
            targetSize = UDim2.new(0, 120, 0, 30)
            targetContentSize = UDim2.new(1, 0, 0, 0)
        end
        
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        local sizeTween = _private.TweenService:Create(menuFrame, tweenInfo, {Size = targetSize})
        local contentTween = _private.TweenService:Create(contentFrame, tweenInfo, {Size = targetContentSize})
        
        sizeTween:Play()
        contentTween:Play()
    end
    
    -- 标题栏点击事件（展开/收起）
    header.MouseButton1Click:Connect(toggleMenu)
    
    -- 拖动功能
    local function updateInput(input)
        local delta = input.Position - dragStart
        menuFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragStart = input.Position
            startPos = menuFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragInput = nil
                end
            end)
        end
    end)
    
    header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    _private.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput then
            updateInput(input)
        end
    end)
    
    -- 如果是子菜单，设置在屏幕中心位置并存储引用
    if isSubMenu then
        local centerX = (_private.screenGui.AbsoluteSize.X / 2) - (menuFrame.AbsoluteSize.X / 2)
        local centerY = (_private.screenGui.AbsoluteSize.Y / 2) - (menuFrame.AbsoluteSize.Y / 2)
        menuFrame.Position = UDim2.new(0, centerX, 0, centerY)
        _private.subMenus[title] = menuFrame
        
        -- 设置初始透明度为1，准备浮现动画
        menuFrame.BackgroundTransparency = 1
        menuFrame.Header.TextTransparency = 1
        
        -- 浮现动画
        local fadeIn = _private.TweenService:Create(
            menuFrame,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundTransparency = 0.1}
        )
        
        local textFadeIn = _private.TweenService:Create(
            menuFrame.Header,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {TextTransparency = 0}
        )
        
        fadeIn:Play()
        textFadeIn:Play()
        
        menuFrame.Visible = true -- 创建时默认显示
        _private.subMenuStates[title] = true -- 记录状态为开启
    else
        -- 主菜单位置
        menuFrame.Position = UDim2.new(0, 15, 0, 15)
    end
    
    -- 适配移动设备：调整UI大小
    if _private.UserInputService.TouchEnabled then
        menuFrame.Size = UDim2.new(0, 140, 0, 35)
        header.Size = UDim2.new(1, 0, 0, 35)
        header.TextSize = 18
        
        for _, button in ipairs(optionButtons) do
            button.Size = UDim2.new(1, 0, 0, 32)
            button.TextSize = 16
        end
    end
    
    return menuFrame
end

-- 重置库状态
function MCTechGUILib.reset()
    -- 清理所有UI元素
    if _private.screenGui then
        _private.screenGui:Destroy()
        _private.screenGui = nil
    end
    
    -- 重置所有状态
    _private.subMenus = {}
    _private.subMenuStates = {}
    _private.detailWindows = {}
    _private.detailStates = {}
    _private.notificationQueue = {}
    _private.activeNotifications = {}
    _private.activeFeatures = {}
    _private.featureStatusContainer = nil
    _private.showFeatureStatus = true
    _private.playerInfoEnabled = false
    _private.playerInfoFrame = nil
    
    -- 重新初始化
    return MCTechGUILib.init()
end

-- 获取当前状态
function MCTechGUILib.getState()
    return {
        activeFeatures = _private.activeFeatures,
        subMenuStates = _private.subMenuStates,
        detailStates = _private.detailStates,
        showFeatureStatus = _private.showFeatureStatus,
        playerInfoEnabled = _private.playerInfoEnabled
    }
end

-- 导出库
return MCTechGUILib